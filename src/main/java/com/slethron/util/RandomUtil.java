package com.slethron.util;

import com.slethron.geneticoptimization.type.BitString;
import com.slethron.geneticoptimization.type.NQueensBoard;

import java.util.concurrent.ThreadLocalRandom;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

/**
 * Utility class used by this project to generate Random objects of various types to be used in
 * generating large collections or populations of those objects. I felt that these methods didn't
 * properly belong in their respective type classes because there are already constructors that are
 * provided. Also, as for objects like String (java.lang.String), it was necessary to have this
 * class as a helper because their is no type class that exists as a means of defining the object as
 * the subject of the problem class.
 */
public class RandomUtil {
    
    private RandomUtil() {}
    
    /**
     * Generates a string containing random UTF-16 characters. An arbitrary integer within the bounds of
     * 127 (exclusive) and 32 (inclusive) can be converted into a char using the method toChars(int)
     * provided via the class java.lang.Character.
     * @param length The length of the string being generated.
     * @return The generated random string
     */
    public static String generateRandomString(int length) {
        return IntStream.range(0, length)
                .unordered().parallel()
                .mapToObj(i -> ThreadLocalRandom.current().nextInt(127 - 32) + 32)
                .map(Character::toChars)
                .map(String::valueOf)
                .collect(Collectors.joining());
    }
    
    /**
     * Generates a BitString containing random boolean values.
     * @param length The bit length of the string of bits to be generated
     * @return The generated random BitString
     */
    public static BitString generateRandomBitString(int length) {
        var bits = new boolean[length];
        
        for (var i = 0; i < length; i++) {
            bits[i] = ThreadLocalRandom.current().nextBoolean();
        }
        
        return new BitString(bits);
    }
    
    /**
     * Generates an NQueensBoard object containing random integer values in each of it's columns that are
     * within the bounds of the board length. The fitness can be calculated for the board generated by this
     * method immediately upon retrieval it.
     * @param n The side length (or n) of the N-Queens board.
     * @return The generated random N-Queens board object
     */
    public static NQueensBoard generateRandomNQueensBoard(int n) {
        var board = new int[n];
        for (var i = 0; i < n; i++) {
            board[i] = ThreadLocalRandom.current().nextInt(n);
        }
        
        return new NQueensBoard(board);
    }
}
